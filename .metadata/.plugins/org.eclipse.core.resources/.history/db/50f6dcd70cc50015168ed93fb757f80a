package ch.ethz.soms.nervous.android.sensors;

import java.util.ArrayList;
import java.util.List;

import ch.ethz.soms.nervous.android.sensorQueries.SensorQueriesAccelerometer;
import ch.ethz.soms.nervous.nervousproto.SensorUploadProtos.SensorUpload.SensorData;

import java.math.*;

public class SensorDescInformationNew extends SensorDescVectorValue {
	
	
	public static final long SENSOR_ID = 0x000000000000000ff;
	public static final long earliest = 0;
	public static final long latest = 1;
	public static final long targetSENSOR_ID = 0x0000000000000000L;
	public static final int entropyAccuracy = 1000;
	
	private float entropyX;
	private float entropyY;
	private float entropyZ;
	private final boolean isLogging;
	private final boolean isSharing;

	public SensorDescInformationNew(final long timestamp, final float entropyX, final float entropyY, final float entropyZ, 
			final boolean isLogging, final boolean isSharing) {
		super(timestamp);
		this.entropyX = entropyX;
		this.entropyY = entropyY;
		this.entropyZ = entropyZ;
		
		
		this.isLogging = isLogging;
		this.isSharing = isSharing;
	}
	
	public SensorDescInformationNew(SensorData sensorData) {
		super(sensorData);
		this.entropyX = sensorData.getValueFloat(1);
		this.entropyY = sensorData.getValueFloat(2);
		this.entropyZ = sensorData.getValueFloat(3);
		
		this.isLogging = sensorData.getValueBool(0);
		this.isSharing = sensorData.getValueBool(1);
	}

	public float getEntropyX(){
		return entropyX;	
	}
	
	public float getEntropyY(){
		return entropyY;
	}
	
	public float getEntropyZ(){
		return entropyZ;
	}
	

//	public float[] getEntropy() {
//		
//		
//		return (new float[] {entropyX, entropyY, entropyZ});
//	}
//
//	public boolean getLogging(){
//		return isLogging;
//	}
//	public boolean getSharing(){
//		return isSharing;
//	}
//	public void computeEntropy(){
//		
//		//BEGINNING
//		
////        var b = AccelerometerQuery(from: UInt64(earliest), to: UInt64.max) //get all values of battery stored.
////        println("get count of list")
////        var c : Float = Float(b.getCount())
////        println("get maximum value")
////        var m = b.getMaxValue()
////        var data = b.List
////        var avg : Float = 0
////        var ent : Float = 0.0
////        for i in data {
////            avg+=i.valueFloat[0]
////        }
////        avg /= c
////        
////        var temp: [Float] = []
////        var count : [Int] = [Int](count:entropyAccuracy, repeatedValue: 0)
////        var no: Int = 0
////        for i in data {
////            temp.append((i.valueFloat[0]-avg)*(i.valueFloat[0]-avg))
////            var jo = Int(abs(i.valueFloat[0]*Float(entropyAccuracy)/4))
////            count[jo]++
////            no++
////        }
////        for p in 1...entropyAccuracy-1 {
////            ent += (Float(count[p])/Float(no))*log((Float(count[p])/Float(no)))
////        }
////        
////        var stddev = temp[temp.count/2]
////        self.entropy = ent
////        
////        self.isLogging = VM.getLogSwitch(0)
////        self.isSharing = VM.getShareSwitch(0)
//	//END
//	
//	SensorQueriesAccelerometer accQuery = new SensorQueriesAccelerometer(earliest, latest, null);
//	int count = accQuery.getCount();
//	float min = accQuery.getMinValue().getAccX();
//	float max = accQuery.getMaxValue().getAccX();
//	float interval = max-min;
//	List<SensorData> data = accQuery.list;
//	int [] counter = new int [entropyAccuracy];
//	for (SensorData temp : data) {
//			
//			int jo = (int) ((temp.getValueFloat(0)-min)*entropyAccuracy/interval);
//			counter [jo]++;	
//	}
//	float ent = 0;
//	for (int i = 0; i < entropyAccuracy; i++ ){
//		ent += (counter[i]/count)*Math.log10(counter[i]/count);
//	}
//	this.entropyX = ent;
//}
	

	@Override
	public SensorData toProtoSensor() {
		SensorData.Builder sdb = SensorData.newBuilder();
		sdb.setRecordTime(getTimestamp());
		sdb.addValueFloat((getEntropy()[0]));
		sdb.addValueFloat((getEntropy()[1]));
		sdb.addValueFloat((getEntropy()[2]));
		sdb.addValueBool(getLogging());
		sdb.addValueBool(getSharing());
		return sdb.build();
	}

	@Override
	public long getSensorId() {
		return SENSOR_ID;
	}

	@Override
	public ArrayList<Float> getValue() {
		// TODO Auto-generated method stub
		ArrayList<Float> arrayList = new ArrayList<Float>();
		arrayList.add(entropyX);
		arrayList.add(entropyY);
		arrayList.add(entropyZ);
		return arrayList; // 3 values returned
	}

}

